# Generated by Django 5.2 on 2025-06-24 14:52

import django.db.models.deletion
import shows.storage
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('flag', models.ImageField(blank=True, max_length=500, storage=shows.storage.OverwriteStorage(), upload_to=shows.storage.File_Rename('shows/countries_flags/'))),
                ('image', models.ImageField(blank=True, max_length=500, storage=shows.storage.OverwriteStorage(), upload_to=shows.storage.File_Rename('shows/countries/'))),
                ('description', models.TextField(blank=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Genre',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('image', models.ImageField(blank=True, max_length=500, storage=shows.storage.OverwriteStorage(), upload_to=shows.storage.File_Rename('shows/genres/'))),
                ('description', models.TextField(blank=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Label',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('image', models.ImageField(blank=True, max_length=500, storage=shows.storage.OverwriteStorage(), upload_to=shows.storage.File_Rename('shows/labels/'))),
                ('description', models.TextField(blank=True)),
            ],
            options={
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Language',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('image', models.ImageField(blank=True, max_length=500, storage=shows.storage.OverwriteStorage(), upload_to=shows.storage.File_Rename('shows/languages/'))),
                ('description', models.TextField(blank=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Rating',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('image', models.ImageField(blank=True, max_length=500, storage=shows.storage.OverwriteStorage(), upload_to=shows.storage.File_Rename('shows/ratings/'))),
                ('description', models.TextField(blank=True)),
            ],
            options={
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Artist',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('birthYear', models.IntegerField()),
                ('image', models.ImageField(blank=True, max_length=500, storage=shows.storage.OverwriteStorage(), upload_to=shows.storage.File_Rename('shows/artists/'))),
                ('description', models.TextField(blank=True)),
                ('nationality', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='artists', to='shows.country')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.AddField(
            model_name='country',
            name='languages',
            field=models.ManyToManyField(related_name='countries', to='shows.language'),
        ),
        migrations.CreateModel(
            name='Show',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150)),
                ('year', models.CharField(default='2025', max_length=25)),
                ('kind', models.CharField(choices=[('film', 'Film'), ('series', 'Series'), ('program', 'Program')], default='film', max_length=10)),
                ('sample', models.BooleanField(default=False)),
                ('captions', models.BooleanField(default=False)),
                ('image', models.ImageField(blank=True, max_length=500, storage=shows.storage.OverwriteStorage(), upload_to=shows.storage.File_Rename('shows/shows/'))),
                ('imdb', models.TextField(default='<small class="text-muted">IMDB Rating Not Available</small>')),
                ('description', models.TextField(blank=True)),
                ('episodes', models.JSONField(blank=True, default=dict)),
                ('finalized', models.BooleanField(default=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('popup', models.TextField(blank=True, default='\n    <div class="alert alert-dismissible fade show alert-info" role="alert">\n    <h4 class="alert-heading">Well done!</h4>\n    <p>Aww yeah, you successfully read this important alert message. This example text is going to run a bit longer so that you can see how spacing within an alert works with this kind of content.</p>\n    <hr>\n    <p class="mb-0">Whenever you need to, be sure to use margin utilities to keep things nice and tidy.</p>\n    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close" onclick="popupClosed();"></button>\n    </div>')),
                ('artists', models.ManyToManyField(blank=True, related_name='shows', to='shows.artist')),
                ('countries', models.ManyToManyField(blank=True, related_name='shows', to='shows.country')),
            ],
            options={
                'ordering': ['-year', 'name'],
            },
        ),
    ]
